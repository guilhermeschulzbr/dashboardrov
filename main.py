# -*- coding: utf-8 -*-
"""
Dashboard Operacional ROV - Vers√£o Refatorada
Execu√ß√£o: streamlit run main.py
"""


import streamlit as st
from config.settings import Config, PageConfig
from data.loader import DataLoader
from data.processors import DataProcessor
from components.filters import FilterComponent
from components.kpis import KPIComponent
from components.charts import ChartComponent
from components.tables import TableComponent
from modules.fleet import FleetAnalysis
from modules.drivers import DriverAnalysis
from modules.anomalies import AnomalyDetection
from modules.timeline import TimelineAnalysis
from modules.journey_filter import filter_by_daily_journey
from modules.suspicions import SuspicionAnalysis
from utils.cache import CacheManager
from modules.predictions import PredictionAnalysis


# Configura√ß√£o da p√°gina
PageConfig.setup()


class DashboardROV:
    """Classe principal do Dashboard ROV"""
    
    def __init__(self):
        self.config = Config()
        self.cache = CacheManager()
        self.init_session_state()
    
    def init_session_state(self):
        """Inicializa o estado da sess√£o"""
        if 'data' not in st.session_state:
            st.session_state.data = None
        if 'filtered_data' not in st.session_state:
            st.session_state.filtered_data = None
        if 'configs' not in st.session_state:
            st.session_state.configs = {}
    
    def run(self):
        """Executa o dashboard"""
        # T√≠tulo e configura√ß√£o inicial
        st.title("üìä Dashboard Operacional ROV")
        st.caption("*Sistema de An√°lise Operacional de Transporte*")
        
        # Sidebar para upload e configura√ß√µes
        with st.sidebar:
            self.render_sidebar()
        
        # Verifica se h√° dados carregados
        if st.session_state.data is None:
            st.info("üëÜ Por favor, fa√ßa upload do arquivo CSV na barra lateral")
            return
        
        # Renderiza o dashboard principal
        self.render_dashboard()
    
    
    def render_dashboard(self):
        """Renderiza o dashboard principal com abas e filtros aplicados."""
        # Determina o DF base com seguran√ßa
        df_candidate = st.session_state.get('filtered_data', None)
        if df_candidate is not None and getattr(df_candidate, "empty", True) is False:
            df = df_candidate
        else:
            df = st.session_state.get('data', None)

        # Aplica filtro de jornadas di√°rias > 09:00h conforme sele√ß√£o da sidebar
        _mode = st.session_state.get('journey_filter_mode', 'N√£o filtrar')
        if df is not None and getattr(df, 'empty', True) is False and _mode != 'N√£o filtrar':
            try:
                df = filter_by_daily_journey(df, mode=_mode, threshold_hours=9.0)
            except Exception as _e:
                st.warning(f'Falha ao aplicar filtro de jornada di√°ria: {_e}')

        if df is None or getattr(df, "empty", True):
            st.info("Sem dados ap√≥s aplica√ß√£o dos filtros.")
            return

        # Abas do dashboard
        tabs = st.tabs([
            "üìå Vis√£o Geral",
            "üß© Frota e Linhas",
            "üë• Motoristas",
            "üìà An√°lises",
            "‚ö†Ô∏è Alertas",
            "üìÖ Linha do Tempo"
        ])
        
        with tabs[0]:
            self.render_overview_tab(df)
        with tabs[1]:
            self.render_fleet_tab(df)
        with tabs[2]:
            self.render_drivers_tab(df)
        with tabs[3]:
            self.render_analysis_tab(df)
        with tabs[4]:
            self.render_alerts_tab(df) if hasattr(self, "render_alerts_tab") else st.info("Sem m√≥dulo de alertas.")
        with tabs[5]:
            self.render_timeline_tab(df)
    def render_sidebar(self):
            """Renderiza a barra lateral"""
            st.title("‚öôÔ∏è Configura√ß√µes")
        
            # Upload de arquivo
            uploaded_file = st.file_uploader(
                "Carregue o arquivo de dados (CSV ';')",
                type=["csv"]
            )
        
            if uploaded_file:
                with st.spinner("Carregando dados..."):
                    loader = DataLoader()
                    df = loader.load_csv(uploaded_file)
                    if df is not None:
                        processor = DataProcessor()
                        df = processor.process_dataframe(df)
                        st.session_state.data = df
                        st.success("‚úÖ Dados carregados com sucesso!")
        
            # Filtros principais
            if st.session_state.data is not None:
                filter_component = FilterComponent(st.session_state.data)
                st.session_state.filtered_data = filter_component.render()

                # Filtro de jornada di√°ria > 09:00h
                st.markdown("### ‚è±Ô∏è Filtro de Jornada Di√°ria (> 13:00h)")
                st.selectbox(
                    "Aplicar filtro de jornadas por motorista no dia",
                    ["N√£o filtrar", "Mostrar apenas", "Expurgar"],
                    index=0,
                    key="journey_filter_mode"
                )
    def render_overview_tab(self, df):
        """Renderiza a aba de vis√£o geral"""
        st.header("Vis√£o Geral do Sistema")
        
        # KPIs principais
        kpi_component = KPIComponent(df, self.config)
        kpi_component.render_main_kpis()
        
        # Gr√°ficos principais
        chart_component = ChartComponent(df)
        
        col1, col2 = st.columns(2)
        with col1:
            chart_component.render_daily_passengers()
        with col2:
            chart_component.render_line_ranking()
        
        # Tabela consolidada
        st.subheader("üìã Resumo por Linha")
        table_component = TableComponent(df, self.config)
        table_component.render_consolidated_table()
    
    def render_fleet_tab(self, df):
        """Renderiza a aba de an√°lise de frota"""
        fleet_analysis = FleetAnalysis(df, self.config)
        fleet_analysis.render()
    
    def render_drivers_tab(self, df):
        """Renderiza a aba de an√°lise de motoristas"""
        driver_analysis = DriverAnalysis(df, self.config)
        driver_analysis.render()
    
    def render_analysis_tab(self, df):
        """Renderiza a aba de an√°lises avan√ßadas"""
        st.header("An√°lises Avan√ßadas")
    
        analysis_type = st.selectbox(
        "Selecione o tipo de an√°lise",
        ["Detec√ß√£o de Anomalias", "An√°lise de Suspei√ß√µes", "Previs√µes"]
        )
    
        if analysis_type == "Detec√ß√£o de Anomalias":
            anomaly_detector = AnomalyDetection(df)
            anomaly_detector.render()
        elif analysis_type == "An√°lise de Suspei√ß√µes":
            suspicion_analysis = SuspicionAnalysis(df)
            suspicion_analysis.render()
        else:  # Previs√µes
            prediction_analysis = PredictionAnalysis(df)
            prediction_analysis.render()
    
    def render_alerts_tab(self, df):
        """Renderiza a aba de alertas"""
        st.header("‚ö†Ô∏è Alertas Operacionais")
        
        # Implementar l√≥gica de alertas
        alerts = self.generate_alerts(df)
        
        if alerts:
            for alert_type, alert_df in alerts:
                with st.expander(f"üî¥ {alert_type} ({len(alert_df)} registros)"):
                    st.dataframe(alert_df.head(100))
        else:
            st.success("‚úÖ Nenhum alerta identificado")
    
    def render_timeline_tab(self, df):
        """Renderiza a aba de linha do tempo"""
        timeline_analysis = TimelineAnalysis(df)
        timeline_analysis.render()
    
    def generate_alerts(self, df):
        """Gera alertas baseados nos dados"""
        alerts = []
        
        # Viagens sem passageiros
        if "Passageiros" in df.columns:
            zero_pax = df[df["Passageiros"].fillna(0) <= 0]
            if not zero_pax.empty:
                alerts.append(("Viagens sem passageiros", zero_pax))
        
        # Adicionar mais l√≥gicas de alerta conforme necess√°rio
        
        return alerts


if __name__ == "__main__":
    app = DashboardROV()
    app.run()
